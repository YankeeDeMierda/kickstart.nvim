-- local my_utils = require 'plugins.configs.lsp.utils'
-- local on_attach, capabilities = my_utils.on_attach, my_utils.capabilities
-- local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ':p:h:t')
-- local config = {
--   -- The command that starts the language server
--   -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
--   cmd = {
--
--     -- ðŸ’€
--     'java',
--     '/usr/lib/jvm/java-24-openjdk',
--     -- depends on if `java` is in your $PATH env variable and if it points to the right version.
--
--     '-Declipse.application=org.eclipse.jdt.ls.core.id1',
--     '-Dosgi.bundles.defaultStartLevel=4',
--     '-Declipse.product=org.eclipse.jdt.ls.core.product',
--     '-Dlog.protocol=true',
--     '-Dlog.level=ALL',
--     '-Xmx1g',
--     '--add-modules=ALL-SYSTEM',
--     '--add-opens',
--     'java.base/java.util=ALL-UNNAMED',
--     '--add-opens',
--     'java.base/java.lang=ALL-UNNAMED',
--
--     -- ðŸ’€
--     '-jar',
--     vim.fn.expand '~/.local/share/nvim/mason/packages/jdtls/plugins/org.eclipse.equinox.launcher_1.6.900.v20240613-2009.jar',
--     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--     -- Must point to the                                                     Change this to
--     -- eclipse.jdt.ls installation                                           the actual version
--
--     -- ðŸ’€
--     '-configuration',
--     vim.fn.expand '~/.local/share/nvim/mason/packages/jdtls/config_linux',
--     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^
--     -- Must point to the                      Change to one of `linux`, `win` or `mac`
--     -- eclipse.jdt.ls installation            Depending on your system.
--
--     -- ðŸ’€
--     -- See `data directory configuration` section in the README
--     '-data',
--     vim.fn.expand '~/.cache/jdtls/workspace' .. project_name,
--   },
--
--   -- ðŸ’€
--   -- This is the default if not provided, you can remove it. Or adjust as needed.
--   -- One dedicated LSP server & client will be started per unique root_dir
--   root_dir = require('jdtls.setup').find_root { '.git', 'mvnw', 'gradlew' },
--
--   -- Here you can configure eclipse.jdt.ls specific settings
--   -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--   -- for a list of options
--   settings = {
--     java = {},
--   },
--
--   -- Language server `initializationOptions`
--   -- You need to extend the `bundles` with paths to jar files
--   -- if you want to use additional eclipse.jdt.ls plugins.
--   --
--   -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation
--   --
--   -- If you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this
--   init_options = {
--     bundles = {},
--   },
--   capabilities = capabilities,
--   on_attach = on_attach,
-- }
-- -- This starts a new client & server,
-- -- or attaches to an existing client & server depending on the `root_dir`.
-- require('jdtls').start_or_attach(config)
----
-- local M = {}
--
-- function M.setup()
--   local jdtls = require 'jdtls'
--   local jdtls_dap = require 'jdtls.dap'
--   local jdtls_setup = require 'jdtls.setup'
--   local home = os.getenv 'HOME'
--
--   local root_markers = { '.git', 'mvnw', 'gradlew', 'pom.xml', 'build.gradle' }
--   local root_dir = jdtls_setup.find_root(root_markers)
--
--   local project_name = vim.fn.fnamemodify(root_dir, ':p:h:t')
--   local workspace_dir = home .. '/.cache/jdtls/workspace' .. project_name
--
--   -- ðŸ’€
--   local path_to_mason_packages = home .. '/.local/share/nvim/mason/packages'
--   -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--
--   local path_to_jdtls = path_to_mason_packages .. '/jdtls'
--   local path_to_jdebug = path_to_mason_packages .. '/java-debug-adapter'
--   local path_to_jtest = path_to_mason_packages .. '/java-test'
--
--   local path_to_config = path_to_jdtls .. '/config_linux'
--   local lombok_path = path_to_jdtls .. '/lombok.jar'
--
--   -- ðŸ’€
--   local path_to_jar = path_to_jdtls .. '/plugins/org.eclipse.equinox.launcher_1.6.900.v20240613-2009.jar'
--   -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--
--   local bundles = {
--     vim.fn.glob(path_to_jdebug .. '/extension/server/com.microsoft.java.debug.plugin-*.jar', true),
--   }
--
--   vim.list_extend(bundles, vim.split(vim.fn.glob(path_to_jtest .. '/extension/server/*.jar', true), '\n'))
--
--   -- LSP settings for Java.
--   local on_attach = function(_, bufnr)
--     jdtls.setup_dap { hotcodereplace = 'auto' }
--     jdtls_dap.setup_dap_main_class_configs()
--
--     -- Create a command `:Format` local to the LSP buffer
--     vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
--       vim.lsp.buf.format()
--     end, { desc = 'Format current buffer with LSP' })
--
--     require('lsp_signature').on_attach({
--       bind = true,
--       padding = '',
--       handler_opts = {
--         border = 'rounded',
--       },
--       hint_prefix = 'ó±„‘ ',
--     }, bufnr)
--
--     -- NOTE: comment out if you don't use Lspsaga
--     -- require 'lspsaga'.init_lsp_saga()
--   end
--
--   local capabilities = {
--     workspace = {
--       configuration = true,
--     },
--     textDocument = {
--       completion = {
--         completionItem = {
--           snippetSupport = true,
--         },
--       },
--     },
--   }
--
--   local config = {
--     flags = {
--       allow_incremental_sync = true,
--     },
--   }
--
--   config.cmd = {
--     --
--     -- 				-- ðŸ’€
--     'java', -- or '/path/to/java17_or_newer/bin/java'
--     -- depends on if `java` is in your $PATH env variable and if it points to the right version.
--
--     '-Declipse.application=org.eclipse.jdt.ls.core.id1',
--     '-Dosgi.bundles.defaultStartLevel=4',
--     '-Declipse.product=org.eclipse.jdt.ls.core.product',
--     '-Dlog.protocol=true',
--     '-Dlog.level=ALL',
--     '-Xmx1g',
--     '-javaagent:' .. lombok_path,
--     '--add-modules=ALL-SYSTEM',
--     '--add-opens',
--     'java.base/java.util=ALL-UNNAMED',
--     '--add-opens',
--     'java.base/java.lang=ALL-UNNAMED',
--
--     -- ðŸ’€
--     '-jar',
--     path_to_jar,
--     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^
--     -- Must point to the                                                     Change this to
--     -- eclipse.jdt.ls installation                                           the actual version
--
--     -- ðŸ’€
--     '-configuration',
--     path_to_config,
--     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^
--     -- Must point to the                      Change to one of `linux`, `win` or `mac`
--     -- eclipse.jdt.ls installation            Depending on your system.
--
--     -- ðŸ’€
--     -- See `data directory configuration` section in the README
--     '-data',
--     workspace_dir,
--   }
--
--   config.settings = {
--     java = {
--       references = {
--         includeDecompiledSources = true,
--       },
--       format = {
--         enabled = true,
--         settings = {
--           url = vim.fn.stdpath 'config' .. '/lang_servers/intellij-java-google-style.xml',
--           profile = 'GoogleStyle',
--         },
--       },
--       eclipse = {
--         downloadSources = true,
--       },
--       maven = {
--         downloadSources = true,
--       },
--       signatureHelp = { enabled = true },
--       contentProvider = { preferred = 'fernflower' },
--       -- eclipse = {
--       -- 	downloadSources = true,
--       -- },
--       -- implementationsCodeLens = {
--       -- 	enabled = true,
--       -- },
--       completion = {
--         favoriteStaticMembers = {
--           'org.hamcrest.MatcherAssert.assertThat',
--           'org.hamcrest.Matchers.*',
--           'org.hamcrest.CoreMatchers.*',
--           'org.junit.jupiter.api.Assertions.*',
--           'java.util.Objects.requireNonNull',
--           'java.util.Objects.requireNonNullElse',
--           'org.mockito.Mockito.*',
--         },
--         filteredTypes = {
--           'com.sun.*',
--           'io.micrometer.shaded.*',
--           'java.awt.*',
--           'jdk.*',
--           'sun.*',
--         },
--         importOrder = {
--           'java',
--           'javax',
--           'com',
--           'org',
--         },
--       },
--       sources = {
--         organizeImports = {
--           starThreshold = 9999,
--           staticStarThreshold = 9999,
--         },
--       },
--       codeGeneration = {
--         toString = {
--           template = '${object.className}{${member.name()}=${member.value}, ${otherMembers}}',
--           -- flags = {
--           -- 	allow_incremental_sync = true,
--           -- },
--         },
--         useBlocks = true,
--       },
--       configuration = {
--         runtimes = {
--           {
--             name = 'java-17-openjdk',
--             path = '/usr/lib/jvm/default-runtime/bin/java',
--           },
--         },
--       },
--       -- project = {
--       -- 	referencedLibraries = {
--       -- 		"**/lib/*.jar",
--       -- 	},
--       -- },
--     },
--   }
--
--   config.on_attach = on_attach
--   config.capabilities = capabilities
--   config.on_init = function(client, _)
--     client.notify('workspace/didChangeConfiguration', { settings = config.settings })
--   end
--
--   local extendedClientCapabilities = require('jdtls').extendedClientCapabilities
--   extendedClientCapabilities.resolveAdditionalTextEditsSupport = true
--
--   config.init_options = {
--     bundles = bundles,
--     extendedClientCapabilities = extendedClientCapabilities,
--   }
--
--   -- Start Server
--   require('jdtls').start_or_attach(config)
--
--   -- Set Java Specific Keymaps
--   -- require 'jdtls.keymaps'
-- end
--
-- return M
--
-- local home = vim.env.HOME -- Get the home directory
--
-- local jdtls = require 'jdtls'
-- local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ':p:h:t')
-- -- local workspace_dir = home .. '/jdtls-workspace/' .. project_name
-- local workspace_dir = home .. '/.cache/nvim/jdtls/workspaces/' .. project_name
-- print(workspace_dir)
--
-- local system_os = ''
--
-- -- Determine OS
-- if vim.fn.has 'mac' == 1 then
--   system_os = 'mac'
-- elseif vim.fn.has 'unix' == 1 then
--   system_os = 'linux'
-- elseif vim.fn.has 'win32' == 1 or vim.fn.has 'win64' == 1 then
--   system_os = 'win'
-- else
--   print "OS not found, defaulting to 'linux'"
--   system_os = 'linux'
-- end
--
-- -- Needed for debugging
-- local bundles = {
--   vim.fn.glob(home .. '/.local/share/nvim/mason/share/java-debug-adapter/com.microsoft.java.debug.plugin.jar'),
-- }
--
-- -- Needed for running/debugging unit tests
-- vim.list_extend(bundles, vim.split(vim.fn.glob(home .. '/.local/share/nvim/mason/share/java-test/*.jar', 1), '\n'))
--
-- -- See `:help vim.lsp.start_client` for an overview of the supported `config` options.
-- local config = {
--   -- The command that starts the language server
--   -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line
--   cmd = {
--     'java',
--
--     '-Declipse.application=org.eclipse.jdt.ls.core.id1',
--     '-Dosgi.bundles.defaultStartLevel=4',
--     '-Declipse.product=org.eclipse.jdt.ls.core.product',
--     '-Dlog.protocol=true',
--     '-Dlog.level=ALL',
--     '-javaagent:' .. home .. '/.local/share/nvim/mason/share/jdtls/lombok.jar',
--     '-Xmx4g',
--     '--add-modules=ALL-SYSTEM',
--     '--add-opens',
--     'java.base/java.util=ALL-UNNAMED',
--     '--add-opens',
--     'java.base/java.lang=ALL-UNNAMED',
--
--     -- Eclipse jdtls location
--     '-jar',
--     home .. '/.local/share/nvim/mason/share/jdtls/plugins/org.eclipse.equinox.launcher.jar',
--     -- config
--     '-configuration',
--     home .. '/.local/share/nvim/mason/packages/jdtls/config_' .. system_os,
--     -- data
--     -- '-data',
--     -- workspace_dir,
--   },
--
--   -- This is the default if not provided, you can remove it. Or adjust as needed.
--   -- One dedicated LSP server & client will be started per unique root_dir
--   root_dir = require('jdtls.setup').find_root { '.git', 'mvnw', 'pom.xml', 'build.gradle' },
--
--   -- Here you can configure eclipse.jdt.ls specific settings
--   -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
--   settings = {
--     java = {
--       -- TODO Replace this with the absolute path to your main java version (JDTLS requires JDK 21 or higher)
--       home = '/usr/lib/jvm/java-24-openjdk',
--       eclipse = {
--         downloadSources = true,
--       },
--       configuration = {
--         updateBuildConfiguration = 'interactive',
--         -- TODO Update this by adding any runtimes that you need to support your Java projects and removing any that you don't have installed
--         -- The runtimes' name parameter needs to match a specific Java execution environments.  See https://github.com/eclipse-jdtls/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request and search "ExecutionEnvironment".
--         runtimes = {
--           {
--             name = 'JavaSE-17',
--             path = '/usr/lib/jvm/java-17-openjdk',
--           },
--           {
--             name = 'JavaSE-21',
--             path = '/usr/lib/jvm/java-21-openjdk',
--           },
--           {
--             name = 'JavaSE-24',
--             path = '/usr/lib/jvm/java-24-openjdk',
--           },
--         },
--       },
--       maven = {
--         downloadSources = true,
--       },
--       implementationsCodeLens = {
--         enabled = true,
--       },
--       referencesCodeLens = {
--         enabled = true,
--       },
--       references = {
--         includeDecompiledSources = true,
--       },
--       signatureHelp = { enabled = true },
--       format = {
--         enabled = true,
--         -- Formatting works by default, but you can refer to a specific file/URL if you choose
--         -- settings = {
--         --   url = "https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml",
--         --   profile = "GoogleStyle",
--         -- },
--       },
--       completion = {
--         favoriteStaticMembers = {
--           'org.hamcrest.MatcherAssert.assertThat',
--           'org.hamcrest.Matchers.*',
--           'org.hamcrest.CoreMatchers.*',
--           'org.junit.jupiter.api.Assertions.*',
--           'java.util.Objects.requireNonNull',
--           'java.util.Objects.requireNonNullElse',
--           'org.mockito.Mockito.*',
--         },
--         importOrder = {
--           'java',
--           'javax',
--           'com',
--           'org',
--         },
--       },
--       sources = {
--         organizeImports = {
--           starThreshold = 9999,
--           staticStarThreshold = 9999,
--         },
--       },
--       codeGeneration = {
--         toString = {
--           template = '${object.className}{${member.name()}=${member.value}, ${otherMembers}}',
--         },
--         useBlocks = true,
--       },
--     },
--   },
--   -- Needed for auto-completion with method signatures and placeholders
--   capabilities = require('cmp_nvim_lsp').default_capabilities(),
--   flags = {
--     allow_incremental_sync = true,
--   },
--   init_options = {
--     -- References the bundles defined above to support Debugging and Unit Testing
--     bundles = bundles,
--     extendedClientCapabilities = jdtls.extendedClientCapabilities,
--   },
-- }
--
-- -- Needed for debugging
-- config['on_attach'] = function(client, bufnr)
--   jdtls.setup_dap { hotcodereplace = 'auto' }
--   require('jdtls.dap').setup_dap_main_class_configs()
-- end
--
-- -- This starts a new client & server, or attaches to an existing client & server based on the `root_dir`.
-- jdtls.start_or_attach(config)
